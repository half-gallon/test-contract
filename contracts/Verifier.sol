// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract Verifier {

    /**
     * @notice EZKL P value
     * @dev In order to prevent the verifier from accepting two version of the same pubInput, n and the quantity (n + P),  where n + P <= 2^256, we require that all instances are stricly less than P.
     * @dev The reason for this is that the assmebly code of the verifier performs all arithmetic operations modulo P and as a consequence can't distinguish between n and n + P values.
     */

    uint256 constant SIZE_LIMIT = 21888242871839275222246405745257275088696311157297823662689037894645226208583; 

    function verify(
        uint256[2] calldata instances,
        bytes calldata proof
    ) public view returns (bool) {
        bool success = true;
        bytes32[1082] memory transcript;
        for (uint i = 0; i < instances.length; i++) {
            require(instances[i] < SIZE_LIMIT);
        }
        assembly {                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001                    function validate_ec_point(x, y) -> valid {                        {                            let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            valid := and(x_lt_p, y_lt_p)                        }                        {                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let is_affine := eq(x_cube_plus_3, y_square)                            valid := and(valid, is_affine)                        }                    }                    mstore(0xa0, mod(calldataload(0x4), f_q))mstore(0xc0, mod(calldataload(0x24), f_q))mstore(0x80, 14241601315765511622452503455689816106084392356734932032287448949410932978496)        {            let x := calldataload(0x84)            mstore(0xe0, x)            let y := calldataload(0xa4)            mstore(0x100, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xc4)            mstore(0x120, x)            let y := calldataload(0xe4)            mstore(0x140, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x104)            mstore(0x160, x)            let y := calldataload(0x124)            mstore(0x180, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x1a0, keccak256(0x80, 288)){            let hash := mload(0x1a0)            mstore(0x1c0, mod(hash, f_q))            mstore(0x1e0, hash)        }        {            let x := calldataload(0x144)            mstore(0x200, x)            let y := calldataload(0x164)            mstore(0x220, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x184)            mstore(0x240, x)            let y := calldataload(0x1a4)            mstore(0x260, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x1c4)            mstore(0x280, x)            let y := calldataload(0x1e4)            mstore(0x2a0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x204)            mstore(0x2c0, x)            let y := calldataload(0x224)            mstore(0x2e0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x244)            mstore(0x300, x)            let y := calldataload(0x264)            mstore(0x320, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x284)            mstore(0x340, x)            let y := calldataload(0x2a4)            mstore(0x360, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x2c4)            mstore(0x380, x)            let y := calldataload(0x2e4)            mstore(0x3a0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x304)            mstore(0x3c0, x)            let y := calldataload(0x324)            mstore(0x3e0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x400, keccak256(0x1e0, 544)){            let hash := mload(0x400)            mstore(0x420, mod(hash, f_q))            mstore(0x440, hash)        }mstore8(0x460, 1)mstore(0x460, keccak256(0x440, 33)){            let hash := mload(0x460)            mstore(0x480, mod(hash, f_q))            mstore(0x4a0, hash)        }        {            let x := calldataload(0x344)            mstore(0x4c0, x)            let y := calldataload(0x364)            mstore(0x4e0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x384)            mstore(0x500, x)            let y := calldataload(0x3a4)            mstore(0x520, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x3c4)            mstore(0x540, x)            let y := calldataload(0x3e4)            mstore(0x560, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x404)            mstore(0x580, x)            let y := calldataload(0x424)            mstore(0x5a0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x444)            mstore(0x5c0, x)            let y := calldataload(0x464)            mstore(0x5e0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x484)            mstore(0x600, x)            let y := calldataload(0x4a4)            mstore(0x620, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x4c4)            mstore(0x640, x)            let y := calldataload(0x4e4)            mstore(0x660, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x680, keccak256(0x4a0, 480)){            let hash := mload(0x680)            mstore(0x6a0, mod(hash, f_q))            mstore(0x6c0, hash)        }        {            let x := calldataload(0x504)            mstore(0x6e0, x)            let y := calldataload(0x524)            mstore(0x700, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x544)            mstore(0x720, x)            let y := calldataload(0x564)            mstore(0x740, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x584)            mstore(0x760, x)            let y := calldataload(0x5a4)            mstore(0x780, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x5c4)            mstore(0x7a0, x)            let y := calldataload(0x5e4)            mstore(0x7c0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x7e0, keccak256(0x6c0, 288)){            let hash := mload(0x7e0)            mstore(0x800, mod(hash, f_q))            mstore(0x820, hash)        }mstore(0x840, mod(calldataload(0x604), f_q))mstore(0x860, mod(calldataload(0x624), f_q))mstore(0x880, mod(calldataload(0x644), f_q))mstore(0x8a0, mod(calldataload(0x664), f_q))mstore(0x8c0, mod(calldataload(0x684), f_q))mstore(0x8e0, mod(calldataload(0x6a4), f_q))mstore(0x900, mod(calldataload(0x6c4), f_q))mstore(0x920, mod(calldataload(0x6e4), f_q))mstore(0x940, mod(calldataload(0x704), f_q))mstore(0x960, mod(calldataload(0x724), f_q))mstore(0x980, mod(calldataload(0x744), f_q))mstore(0x9a0, mod(calldataload(0x764), f_q))mstore(0x9c0, mod(calldataload(0x784), f_q))mstore(0x9e0, mod(calldataload(0x7a4), f_q))mstore(0xa00, mod(calldataload(0x7c4), f_q))mstore(0xa20, mod(calldataload(0x7e4), f_q))mstore(0xa40, mod(calldataload(0x804), f_q))mstore(0xa60, mod(calldataload(0x824), f_q))mstore(0xa80, mod(calldataload(0x844), f_q))mstore(0xaa0, mod(calldataload(0x864), f_q))mstore(0xac0, mod(calldataload(0x884), f_q))mstore(0xae0, mod(calldataload(0x8a4), f_q))mstore(0xb00, mod(calldataload(0x8c4), f_q))mstore(0xb20, mod(calldataload(0x8e4), f_q))mstore(0xb40, mod(calldataload(0x904), f_q))mstore(0xb60, mod(calldataload(0x924), f_q))mstore(0xb80, mod(calldataload(0x944), f_q))mstore(0xba0, mod(calldataload(0x964), f_q))mstore(0xbc0, mod(calldataload(0x984), f_q))mstore(0xbe0, mod(calldataload(0x9a4), f_q))mstore(0xc00, mod(calldataload(0x9c4), f_q))mstore(0xc20, mod(calldataload(0x9e4), f_q))mstore(0xc40, mod(calldataload(0xa04), f_q))mstore(0xc60, mod(calldataload(0xa24), f_q))mstore(0xc80, mod(calldataload(0xa44), f_q))mstore(0xca0, mod(calldataload(0xa64), f_q))mstore(0xcc0, mod(calldataload(0xa84), f_q))mstore(0xce0, mod(calldataload(0xaa4), f_q))mstore(0xd00, mod(calldataload(0xac4), f_q))mstore(0xd20, mod(calldataload(0xae4), f_q))mstore(0xd40, mod(calldataload(0xb04), f_q))mstore(0xd60, mod(calldataload(0xb24), f_q))mstore(0xd80, mod(calldataload(0xb44), f_q))mstore(0xda0, mod(calldataload(0xb64), f_q))mstore(0xdc0, mod(calldataload(0xb84), f_q))mstore(0xde0, mod(calldataload(0xba4), f_q))mstore(0xe00, mod(calldataload(0xbc4), f_q))mstore(0xe20, mod(calldataload(0xbe4), f_q))mstore(0xe40, mod(calldataload(0xc04), f_q))mstore(0xe60, keccak256(0x820, 1600)){            let hash := mload(0xe60)            mstore(0xe80, mod(hash, f_q))            mstore(0xea0, hash)        }        {            let x := calldataload(0xc24)            mstore(0xec0, x)            let y := calldataload(0xc44)            mstore(0xee0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xc64)            mstore(0xf00, x)            let y := calldataload(0xc84)            mstore(0xf20, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xca4)            mstore(0xf40, x)            let y := calldataload(0xcc4)            mstore(0xf60, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xce4)            mstore(0xf80, x)            let y := calldataload(0xd04)            mstore(0xfa0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0xfc0, keccak256(0xea0, 288)){            let hash := mload(0xfc0)            mstore(0xfe0, mod(hash, f_q))            mstore(0x1000, hash)        }mstore(0x1020, mulmod(mload(0x800), mload(0x800), f_q))mstore(0x1040, mulmod(mload(0x1020), mload(0x1020), f_q))mstore(0x1060, mulmod(mload(0x1040), mload(0x1040), f_q))mstore(0x1080, mulmod(mload(0x1060), mload(0x1060), f_q))mstore(0x10a0, mulmod(mload(0x1080), mload(0x1080), f_q))mstore(0x10c0, mulmod(mload(0x10a0), mload(0x10a0), f_q))mstore(0x10e0, mulmod(mload(0x10c0), mload(0x10c0), f_q))mstore(0x1100, mulmod(mload(0x10e0), mload(0x10e0), f_q))mstore(0x1120, mulmod(mload(0x1100), mload(0x1100), f_q))mstore(0x1140, mulmod(mload(0x1120), mload(0x1120), f_q))mstore(0x1160, mulmod(mload(0x1140), mload(0x1140), f_q))mstore(0x1180, mulmod(mload(0x1160), mload(0x1160), f_q))mstore(0x11a0, mulmod(mload(0x1180), mload(0x1180), f_q))mstore(0x11c0, mulmod(mload(0x11a0), mload(0x11a0), f_q))mstore(0x11e0, mulmod(mload(0x11c0), mload(0x11c0), f_q))mstore(0x1200, addmod(mload(0x11e0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x1220, mulmod(mload(0x1200), 21887574895677414892802367463831943750807625009412603678587617693528122466305, f_q))mstore(0x1240, mulmod(mload(0x1220), 16352530144570232727633744131804667993120004373047725463318648550785966993151, f_q))mstore(0x1260, addmod(mload(0x800), 5535712727269042494612661613452607095428360027368308880379555635789841502466, f_q))mstore(0x1280, mulmod(mload(0x1220), 14553179485550867228528728261227346284647560894473765120196362074270314914987, f_q))mstore(0x12a0, addmod(mload(0x800), 7335063386288407993717677484029928803900803505942269223501842112305493580630, f_q))mstore(0x12c0, mulmod(mload(0x1220), 4521750382223097318870644937630448302689540805369738458837210702774549763045, f_q))mstore(0x12e0, addmod(mload(0x800), 17366492489616177903375760807626826785858823595046295884860993483801258732572, f_q))mstore(0x1300, mulmod(mload(0x1220), 10763352634187770026454006562738618997775638622944072507352459644433398105234, f_q))mstore(0x1320, addmod(mload(0x800), 11124890237651505195792399182518656090772725777471961836345744542142410390383, f_q))mstore(0x1340, mulmod(mload(0x1220), 21534532313823515215512181691915269261875716777293450290797415136928563006845, f_q))mstore(0x1360, addmod(mload(0x800), 353710558015760006734224053342005826672647623122584052900789049647245488772, f_q))mstore(0x1380, mulmod(mload(0x1220), 14204982954615820785730815556166377574172276341958019443243371773666809943588, f_q))mstore(0x13a0, addmod(mload(0x800), 7683259917223454436515590189090897514376088058458014900454832412908998552029, f_q))mstore(0x13c0, mulmod(mload(0x1220), 1, f_q))mstore(0x13e0, addmod(mload(0x800), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x1400, mulmod(mload(0x1220), 19671853614403325433334785013442879012032153960035114761748042217991436932142, f_q))mstore(0x1420, addmod(mload(0x800), 2216389257435949788911620731814396076516210440380919581950161968584371563475, f_q)){            let prod := mload(0x1260)                prod := mulmod(mload(0x12a0), prod, f_q)                mstore(0x1440, prod)                            prod := mulmod(mload(0x12e0), prod, f_q)                mstore(0x1460, prod)                            prod := mulmod(mload(0x1320), prod, f_q)                mstore(0x1480, prod)                            prod := mulmod(mload(0x1360), prod, f_q)                mstore(0x14a0, prod)                            prod := mulmod(mload(0x13a0), prod, f_q)                mstore(0x14c0, prod)                            prod := mulmod(mload(0x13e0), prod, f_q)                mstore(0x14e0, prod)                            prod := mulmod(mload(0x1420), prod, f_q)                mstore(0x1500, prod)                            prod := mulmod(mload(0x1200), prod, f_q)                mstore(0x1520, prod)                    }mstore(0x1560, 32)mstore(0x1580, 32)mstore(0x15a0, 32)mstore(0x15c0, mload(0x1520))mstore(0x15e0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)mstore(0x1600, 21888242871839275222246405745257275088548364400416034343698204186575808495617)success := and(eq(staticcall(gas(), 0x5, 0x1560, 0xc0, 0x1540, 0x20), 1), success){                        let inv := mload(0x1540)            let v                            v := mload(0x1200)                    mstore(0x1200, mulmod(mload(0x1500), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1420)                    mstore(0x1420, mulmod(mload(0x14e0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x13e0)                    mstore(0x13e0, mulmod(mload(0x14c0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x13a0)                    mstore(0x13a0, mulmod(mload(0x14a0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1360)                    mstore(0x1360, mulmod(mload(0x1480), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1320)                    mstore(0x1320, mulmod(mload(0x1460), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x12e0)                    mstore(0x12e0, mulmod(mload(0x1440), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x12a0)                    mstore(0x12a0, mulmod(mload(0x1260), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(0x1260, inv)        }mstore(0x1620, mulmod(mload(0x1240), mload(0x1260), f_q))mstore(0x1640, mulmod(mload(0x1280), mload(0x12a0), f_q))mstore(0x1660, mulmod(mload(0x12c0), mload(0x12e0), f_q))mstore(0x1680, mulmod(mload(0x1300), mload(0x1320), f_q))mstore(0x16a0, mulmod(mload(0x1340), mload(0x1360), f_q))mstore(0x16c0, mulmod(mload(0x1380), mload(0x13a0), f_q))mstore(0x16e0, mulmod(mload(0x13c0), mload(0x13e0), f_q))mstore(0x1700, mulmod(mload(0x1400), mload(0x1420), f_q)){            let result := mulmod(mload(0x16e0), mload(0xa0), f_q)result := addmod(mulmod(mload(0x1700), mload(0xc0), f_q), result, f_q)mstore(0x1720, result)        }mstore(0x1740, addmod(1, sub(f_q, mload(0xa00)), f_q))mstore(0x1760, mulmod(mload(0x1740), mload(0xa00), f_q))mstore(0x1780, addmod(2, sub(f_q, mload(0xa00)), f_q))mstore(0x17a0, mulmod(mload(0x1780), mload(0x1760), f_q))mstore(0x17c0, mulmod(mload(0x860), mload(0x840), f_q))mstore(0x17e0, addmod(mload(0x17c0), mload(0x8a0), f_q))mstore(0x1800, addmod(mload(0x880), sub(f_q, mload(0x17e0)), f_q))mstore(0x1820, mulmod(mload(0x1800), mload(0x17a0), f_q))mstore(0x1840, mulmod(mload(0x6a0), mload(0x1820), f_q))mstore(0x1860, addmod(1, sub(f_q, mload(0xa40)), f_q))mstore(0x1880, mulmod(mload(0x1860), mload(0xa40), f_q))mstore(0x18a0, addmod(2, sub(f_q, mload(0xa40)), f_q))mstore(0x18c0, mulmod(mload(0x18a0), mload(0x1880), f_q))mstore(0x18e0, addmod(mload(0x880), sub(f_q, mload(0x860)), f_q))mstore(0x1900, mulmod(mload(0x18e0), mload(0x18c0), f_q))mstore(0x1920, addmod(mload(0x1840), mload(0x1900), f_q))mstore(0x1940, mulmod(mload(0x6a0), mload(0x1920), f_q))mstore(0x1960, mulmod(mload(0x1780), mload(0xa00), f_q))mstore(0x1980, addmod(3, sub(f_q, mload(0xa00)), f_q))mstore(0x19a0, mulmod(mload(0x1980), mload(0x1960), f_q))mstore(0x19c0, addmod(mload(0x840), mload(0x860), f_q))mstore(0x19e0, addmod(mload(0x880), sub(f_q, mload(0x19c0)), f_q))mstore(0x1a00, mulmod(mload(0x19e0), mload(0x19a0), f_q))mstore(0x1a20, addmod(mload(0x1940), mload(0x1a00), f_q))mstore(0x1a40, mulmod(mload(0x6a0), mload(0x1a20), f_q))mstore(0x1a60, addmod(1, sub(f_q, mload(0xa20)), f_q))mstore(0x1a80, mulmod(mload(0x1a60), mload(0xa20), f_q))mstore(0x1aa0, addmod(2, sub(f_q, mload(0xa20)), f_q))mstore(0x1ac0, mulmod(mload(0x1aa0), mload(0x1a80), f_q))mstore(0x1ae0, addmod(mload(0x880), sub(f_q, mload(0x17c0)), f_q))mstore(0x1b00, mulmod(mload(0x1ae0), mload(0x1ac0), f_q))mstore(0x1b20, addmod(mload(0x1a40), mload(0x1b00), f_q))mstore(0x1b40, mulmod(mload(0x6a0), mload(0x1b20), f_q))mstore(0x1b60, mulmod(mload(0x1980), mload(0x1760), f_q))mstore(0x1b80, addmod(mload(0x840), sub(f_q, mload(0x860)), f_q))mstore(0x1ba0, addmod(mload(0x880), sub(f_q, mload(0x1b80)), f_q))mstore(0x1bc0, mulmod(mload(0x1ba0), mload(0x1b60), f_q))mstore(0x1be0, addmod(mload(0x1b40), mload(0x1bc0), f_q))mstore(0x1c00, mulmod(mload(0x6a0), mload(0x1be0), f_q))mstore(0x1c20, mulmod(mload(0x1aa0), mload(0xa20), f_q))mstore(0x1c40, addmod(3, sub(f_q, mload(0xa20)), f_q))mstore(0x1c60, mulmod(mload(0x1c40), mload(0x1c20), f_q))mstore(0x1c80, addmod(mload(0x860), mload(0x8a0), f_q))mstore(0x1ca0, addmod(mload(0x880), sub(f_q, mload(0x1c80)), f_q))mstore(0x1cc0, mulmod(mload(0x1ca0), mload(0x1c60), f_q))mstore(0x1ce0, addmod(mload(0x1c00), mload(0x1cc0), f_q))mstore(0x1d00, mulmod(mload(0x6a0), mload(0x1ce0), f_q))mstore(0x1d20, mulmod(mload(0x1c40), mload(0x1a80), f_q))mstore(0x1d40, addmod(mload(0x880), sub(f_q, sub(f_q, mload(0x860))), f_q))mstore(0x1d60, mulmod(mload(0x1d40), mload(0x1d20), f_q))mstore(0x1d80, addmod(mload(0x1d00), mload(0x1d60), f_q))mstore(0x1da0, mulmod(mload(0x6a0), mload(0x1d80), f_q))mstore(0x1dc0, mulmod(mload(0x18a0), mload(0xa40), f_q))mstore(0x1de0, addmod(3, sub(f_q, mload(0xa40)), f_q))mstore(0x1e00, mulmod(mload(0x1de0), mload(0x1dc0), f_q))mstore(0x1e20, addmod(mload(0x860), sub(f_q, mload(0x880)), f_q))mstore(0x1e40, mulmod(mload(0x1e20), mload(0x1e00), f_q))mstore(0x1e60, addmod(mload(0x1da0), mload(0x1e40), f_q))mstore(0x1e80, mulmod(mload(0x6a0), mload(0x1e60), f_q))mstore(0x1ea0, mulmod(mload(0x1de0), mload(0x1880), f_q))mstore(0x1ec0, mulmod(mload(0x860), mload(0x1ea0), f_q))mstore(0x1ee0, addmod(mload(0x1e80), mload(0x1ec0), f_q))mstore(0x1f00, mulmod(mload(0x6a0), mload(0x1ee0), f_q))mstore(0x1f20, addmod(mload(0x860), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x1f40, mulmod(mload(0x1f20), mload(0x860), f_q))mstore(0x1f60, mulmod(mload(0x1f40), mload(0xa60), f_q))mstore(0x1f80, addmod(mload(0x1f00), mload(0x1f60), f_q))mstore(0x1fa0, mulmod(mload(0x6a0), mload(0x1f80), f_q))mstore(0x1fc0, addmod(1, sub(f_q, mload(0xb40)), f_q))mstore(0x1fe0, mulmod(mload(0x1fc0), mload(0x16e0), f_q))mstore(0x2000, addmod(mload(0x1fa0), mload(0x1fe0), f_q))mstore(0x2020, mulmod(mload(0x6a0), mload(0x2000), f_q))mstore(0x2040, mulmod(mload(0xba0), mload(0xba0), f_q))mstore(0x2060, addmod(mload(0x2040), sub(f_q, mload(0xba0)), f_q))mstore(0x2080, mulmod(mload(0x2060), mload(0x1620), f_q))mstore(0x20a0, addmod(mload(0x2020), mload(0x2080), f_q))mstore(0x20c0, mulmod(mload(0x6a0), mload(0x20a0), f_q))mstore(0x20e0, addmod(mload(0xba0), sub(f_q, mload(0xb80)), f_q))mstore(0x2100, mulmod(mload(0x20e0), mload(0x16e0), f_q))mstore(0x2120, addmod(mload(0x20c0), mload(0x2100), f_q))mstore(0x2140, mulmod(mload(0x6a0), mload(0x2120), f_q))mstore(0x2160, addmod(1, sub(f_q, mload(0x1620)), f_q))mstore(0x2180, addmod(mload(0x1640), mload(0x1660), f_q))mstore(0x21a0, addmod(mload(0x2180), mload(0x1680), f_q))mstore(0x21c0, addmod(mload(0x21a0), mload(0x16a0), f_q))mstore(0x21e0, addmod(mload(0x21c0), mload(0x16c0), f_q))mstore(0x2200, addmod(mload(0x2160), sub(f_q, mload(0x21e0)), f_q))mstore(0x2220, mulmod(mload(0xaa0), mload(0x420), f_q))mstore(0x2240, addmod(mload(0x840), mload(0x2220), f_q))mstore(0x2260, addmod(mload(0x2240), mload(0x480), f_q))mstore(0x2280, mulmod(mload(0xac0), mload(0x420), f_q))mstore(0x22a0, addmod(mload(0x860), mload(0x2280), f_q))mstore(0x22c0, addmod(mload(0x22a0), mload(0x480), f_q))mstore(0x22e0, mulmod(mload(0x22c0), mload(0x2260), f_q))mstore(0x2300, mulmod(mload(0xae0), mload(0x420), f_q))mstore(0x2320, addmod(mload(0x880), mload(0x2300), f_q))mstore(0x2340, addmod(mload(0x2320), mload(0x480), f_q))mstore(0x2360, mulmod(mload(0x2340), mload(0x22e0), f_q))mstore(0x2380, mulmod(mload(0x2360), mload(0xb60), f_q))mstore(0x23a0, mulmod(1, mload(0x420), f_q))mstore(0x23c0, mulmod(mload(0x800), mload(0x23a0), f_q))mstore(0x23e0, addmod(mload(0x840), mload(0x23c0), f_q))mstore(0x2400, addmod(mload(0x23e0), mload(0x480), f_q))mstore(0x2420, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x420), f_q))mstore(0x2440, mulmod(mload(0x800), mload(0x2420), f_q))mstore(0x2460, addmod(mload(0x860), mload(0x2440), f_q))mstore(0x2480, addmod(mload(0x2460), mload(0x480), f_q))mstore(0x24a0, mulmod(mload(0x2480), mload(0x2400), f_q))mstore(0x24c0, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x420), f_q))mstore(0x24e0, mulmod(mload(0x800), mload(0x24c0), f_q))mstore(0x2500, addmod(mload(0x880), mload(0x24e0), f_q))mstore(0x2520, addmod(mload(0x2500), mload(0x480), f_q))mstore(0x2540, mulmod(mload(0x2520), mload(0x24a0), f_q))mstore(0x2560, mulmod(mload(0x2540), mload(0xb40), f_q))mstore(0x2580, addmod(mload(0x2380), sub(f_q, mload(0x2560)), f_q))mstore(0x25a0, mulmod(mload(0x2580), mload(0x2200), f_q))mstore(0x25c0, addmod(mload(0x2140), mload(0x25a0), f_q))mstore(0x25e0, mulmod(mload(0x6a0), mload(0x25c0), f_q))mstore(0x2600, mulmod(mload(0xb00), mload(0x420), f_q))mstore(0x2620, addmod(mload(0x1720), mload(0x2600), f_q))mstore(0x2640, addmod(mload(0x2620), mload(0x480), f_q))mstore(0x2660, mulmod(mload(0xb20), mload(0x420), f_q))mstore(0x2680, addmod(mload(0x8c0), mload(0x2660), f_q))mstore(0x26a0, addmod(mload(0x2680), mload(0x480), f_q))mstore(0x26c0, mulmod(mload(0x26a0), mload(0x2640), f_q))mstore(0x26e0, mulmod(mload(0x26c0), mload(0xbc0), f_q))mstore(0x2700, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x420), f_q))mstore(0x2720, mulmod(mload(0x800), mload(0x2700), f_q))mstore(0x2740, addmod(mload(0x1720), mload(0x2720), f_q))mstore(0x2760, addmod(mload(0x2740), mload(0x480), f_q))mstore(0x2780, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x420), f_q))mstore(0x27a0, mulmod(mload(0x800), mload(0x2780), f_q))mstore(0x27c0, addmod(mload(0x8c0), mload(0x27a0), f_q))mstore(0x27e0, addmod(mload(0x27c0), mload(0x480), f_q))mstore(0x2800, mulmod(mload(0x27e0), mload(0x2760), f_q))mstore(0x2820, mulmod(mload(0x2800), mload(0xba0), f_q))mstore(0x2840, addmod(mload(0x26e0), sub(f_q, mload(0x2820)), f_q))mstore(0x2860, mulmod(mload(0x2840), mload(0x2200), f_q))mstore(0x2880, addmod(mload(0x25e0), mload(0x2860), f_q))mstore(0x28a0, mulmod(mload(0x6a0), mload(0x2880), f_q))mstore(0x28c0, addmod(1, sub(f_q, mload(0xbe0)), f_q))mstore(0x28e0, mulmod(mload(0x28c0), mload(0x16e0), f_q))mstore(0x2900, addmod(mload(0x28a0), mload(0x28e0), f_q))mstore(0x2920, mulmod(mload(0x6a0), mload(0x2900), f_q))mstore(0x2940, mulmod(mload(0xbe0), mload(0xbe0), f_q))mstore(0x2960, addmod(mload(0x2940), sub(f_q, mload(0xbe0)), f_q))mstore(0x2980, mulmod(mload(0x2960), mload(0x1620), f_q))mstore(0x29a0, addmod(mload(0x2920), mload(0x2980), f_q))mstore(0x29c0, mulmod(mload(0x6a0), mload(0x29a0), f_q))mstore(0x29e0, addmod(mload(0xc20), mload(0x420), f_q))mstore(0x2a00, mulmod(mload(0x29e0), mload(0xc00), f_q))mstore(0x2a20, addmod(mload(0xc60), mload(0x480), f_q))mstore(0x2a40, mulmod(mload(0x2a20), mload(0x2a00), f_q))mstore(0x2a60, mulmod(mload(0x840), mload(0x980), f_q))mstore(0x2a80, addmod(1, sub(f_q, mload(0x980)), f_q))mstore(0x2aa0, mulmod(mload(0x2a80), 0, f_q))mstore(0x2ac0, addmod(mload(0x2a60), mload(0x2aa0), f_q))mstore(0x2ae0, mulmod(mload(0x1c0), mload(0x2ac0), f_q))mstore(0x2b00, mulmod(mload(0x860), mload(0x980), f_q))mstore(0x2b20, addmod(mload(0x2b00), mload(0x2aa0), f_q))mstore(0x2b40, addmod(mload(0x2ae0), mload(0x2b20), f_q))mstore(0x2b60, addmod(mload(0x2b40), mload(0x420), f_q))mstore(0x2b80, mulmod(mload(0x2b60), mload(0xbe0), f_q))mstore(0x2ba0, mulmod(mload(0x1c0), mload(0x8e0), f_q))mstore(0x2bc0, addmod(mload(0x2ba0), mload(0x900), f_q))mstore(0x2be0, addmod(mload(0x2bc0), mload(0x480), f_q))mstore(0x2c00, mulmod(mload(0x2be0), mload(0x2b80), f_q))mstore(0x2c20, addmod(mload(0x2a40), sub(f_q, mload(0x2c00)), f_q))mstore(0x2c40, mulmod(mload(0x2c20), mload(0x2200), f_q))mstore(0x2c60, addmod(mload(0x29c0), mload(0x2c40), f_q))mstore(0x2c80, mulmod(mload(0x6a0), mload(0x2c60), f_q))mstore(0x2ca0, addmod(mload(0xc20), sub(f_q, mload(0xc60)), f_q))mstore(0x2cc0, mulmod(mload(0x2ca0), mload(0x16e0), f_q))mstore(0x2ce0, addmod(mload(0x2c80), mload(0x2cc0), f_q))mstore(0x2d00, mulmod(mload(0x6a0), mload(0x2ce0), f_q))mstore(0x2d20, mulmod(mload(0x2ca0), mload(0x2200), f_q))mstore(0x2d40, addmod(mload(0xc20), sub(f_q, mload(0xc40)), f_q))mstore(0x2d60, mulmod(mload(0x2d40), mload(0x2d20), f_q))mstore(0x2d80, addmod(mload(0x2d00), mload(0x2d60), f_q))mstore(0x2da0, mulmod(mload(0x6a0), mload(0x2d80), f_q))mstore(0x2dc0, addmod(1, sub(f_q, mload(0xc80)), f_q))mstore(0x2de0, mulmod(mload(0x2dc0), mload(0x16e0), f_q))mstore(0x2e00, addmod(mload(0x2da0), mload(0x2de0), f_q))mstore(0x2e20, mulmod(mload(0x6a0), mload(0x2e00), f_q))mstore(0x2e40, mulmod(mload(0xc80), mload(0xc80), f_q))mstore(0x2e60, addmod(mload(0x2e40), sub(f_q, mload(0xc80)), f_q))mstore(0x2e80, mulmod(mload(0x2e60), mload(0x1620), f_q))mstore(0x2ea0, addmod(mload(0x2e20), mload(0x2e80), f_q))mstore(0x2ec0, mulmod(mload(0x6a0), mload(0x2ea0), f_q))mstore(0x2ee0, addmod(mload(0xcc0), mload(0x420), f_q))mstore(0x2f00, mulmod(mload(0x2ee0), mload(0xca0), f_q))mstore(0x2f20, addmod(mload(0xd00), mload(0x480), f_q))mstore(0x2f40, mulmod(mload(0x2f20), mload(0x2f00), f_q))mstore(0x2f60, mulmod(mload(0x840), mload(0x9a0), f_q))mstore(0x2f80, addmod(1, sub(f_q, mload(0x9a0)), f_q))mstore(0x2fa0, mulmod(mload(0x2f80), 0, f_q))mstore(0x2fc0, addmod(mload(0x2f60), mload(0x2fa0), f_q))mstore(0x2fe0, mulmod(mload(0x1c0), mload(0x2fc0), f_q))mstore(0x3000, mulmod(mload(0x860), mload(0x9a0), f_q))mstore(0x3020, addmod(mload(0x3000), mload(0x2fa0), f_q))mstore(0x3040, addmod(mload(0x2fe0), mload(0x3020), f_q))mstore(0x3060, addmod(mload(0x3040), mload(0x420), f_q))mstore(0x3080, mulmod(mload(0x3060), mload(0xc80), f_q))mstore(0x30a0, addmod(mload(0x2ba0), mload(0x920), f_q))mstore(0x30c0, addmod(mload(0x30a0), mload(0x480), f_q))mstore(0x30e0, mulmod(mload(0x30c0), mload(0x3080), f_q))mstore(0x3100, addmod(mload(0x2f40), sub(f_q, mload(0x30e0)), f_q))mstore(0x3120, mulmod(mload(0x3100), mload(0x2200), f_q))mstore(0x3140, addmod(mload(0x2ec0), mload(0x3120), f_q))mstore(0x3160, mulmod(mload(0x6a0), mload(0x3140), f_q))mstore(0x3180, addmod(mload(0xcc0), sub(f_q, mload(0xd00)), f_q))mstore(0x31a0, mulmod(mload(0x3180), mload(0x16e0), f_q))mstore(0x31c0, addmod(mload(0x3160), mload(0x31a0), f_q))mstore(0x31e0, mulmod(mload(0x6a0), mload(0x31c0), f_q))mstore(0x3200, mulmod(mload(0x3180), mload(0x2200), f_q))mstore(0x3220, addmod(mload(0xcc0), sub(f_q, mload(0xce0)), f_q))mstore(0x3240, mulmod(mload(0x3220), mload(0x3200), f_q))mstore(0x3260, addmod(mload(0x31e0), mload(0x3240), f_q))mstore(0x3280, mulmod(mload(0x6a0), mload(0x3260), f_q))mstore(0x32a0, addmod(1, sub(f_q, mload(0xd20)), f_q))mstore(0x32c0, mulmod(mload(0x32a0), mload(0x16e0), f_q))mstore(0x32e0, addmod(mload(0x3280), mload(0x32c0), f_q))mstore(0x3300, mulmod(mload(0x6a0), mload(0x32e0), f_q))mstore(0x3320, mulmod(mload(0xd20), mload(0xd20), f_q))mstore(0x3340, addmod(mload(0x3320), sub(f_q, mload(0xd20)), f_q))mstore(0x3360, mulmod(mload(0x3340), mload(0x1620), f_q))mstore(0x3380, addmod(mload(0x3300), mload(0x3360), f_q))mstore(0x33a0, mulmod(mload(0x6a0), mload(0x3380), f_q))mstore(0x33c0, addmod(mload(0xd60), mload(0x420), f_q))mstore(0x33e0, mulmod(mload(0x33c0), mload(0xd40), f_q))mstore(0x3400, addmod(mload(0xda0), mload(0x480), f_q))mstore(0x3420, mulmod(mload(0x3400), mload(0x33e0), f_q))mstore(0x3440, mulmod(mload(0x840), mload(0x9c0), f_q))mstore(0x3460, addmod(1, sub(f_q, mload(0x9c0)), f_q))mstore(0x3480, mulmod(mload(0x3460), 0, f_q))mstore(0x34a0, addmod(mload(0x3440), mload(0x3480), f_q))mstore(0x34c0, mulmod(mload(0x1c0), mload(0x34a0), f_q))mstore(0x34e0, mulmod(mload(0x860), mload(0x9c0), f_q))mstore(0x3500, mulmod(mload(0x3460), 170141183460469231731687303715884105727, f_q))mstore(0x3520, addmod(mload(0x34e0), mload(0x3500), f_q))mstore(0x3540, addmod(mload(0x34c0), mload(0x3520), f_q))mstore(0x3560, addmod(mload(0x3540), mload(0x420), f_q))mstore(0x3580, mulmod(mload(0x3560), mload(0xd20), f_q))mstore(0x35a0, addmod(mload(0x2ba0), mload(0x940), f_q))mstore(0x35c0, addmod(mload(0x35a0), mload(0x480), f_q))mstore(0x35e0, mulmod(mload(0x35c0), mload(0x3580), f_q))mstore(0x3600, addmod(mload(0x3420), sub(f_q, mload(0x35e0)), f_q))mstore(0x3620, mulmod(mload(0x3600), mload(0x2200), f_q))mstore(0x3640, addmod(mload(0x33a0), mload(0x3620), f_q))mstore(0x3660, mulmod(mload(0x6a0), mload(0x3640), f_q))mstore(0x3680, addmod(mload(0xd60), sub(f_q, mload(0xda0)), f_q))mstore(0x36a0, mulmod(mload(0x3680), mload(0x16e0), f_q))mstore(0x36c0, addmod(mload(0x3660), mload(0x36a0), f_q))mstore(0x36e0, mulmod(mload(0x6a0), mload(0x36c0), f_q))mstore(0x3700, mulmod(mload(0x3680), mload(0x2200), f_q))mstore(0x3720, addmod(mload(0xd60), sub(f_q, mload(0xd80)), f_q))mstore(0x3740, mulmod(mload(0x3720), mload(0x3700), f_q))mstore(0x3760, addmod(mload(0x36e0), mload(0x3740), f_q))mstore(0x3780, mulmod(mload(0x6a0), mload(0x3760), f_q))mstore(0x37a0, addmod(1, sub(f_q, mload(0xdc0)), f_q))mstore(0x37c0, mulmod(mload(0x37a0), mload(0x16e0), f_q))mstore(0x37e0, addmod(mload(0x3780), mload(0x37c0), f_q))mstore(0x3800, mulmod(mload(0x6a0), mload(0x37e0), f_q))mstore(0x3820, mulmod(mload(0xdc0), mload(0xdc0), f_q))mstore(0x3840, addmod(mload(0x3820), sub(f_q, mload(0xdc0)), f_q))mstore(0x3860, mulmod(mload(0x3840), mload(0x1620), f_q))mstore(0x3880, addmod(mload(0x3800), mload(0x3860), f_q))mstore(0x38a0, mulmod(mload(0x6a0), mload(0x3880), f_q))mstore(0x38c0, addmod(mload(0xe00), mload(0x420), f_q))mstore(0x38e0, mulmod(mload(0x38c0), mload(0xde0), f_q))mstore(0x3900, addmod(mload(0xe40), mload(0x480), f_q))mstore(0x3920, mulmod(mload(0x3900), mload(0x38e0), f_q))mstore(0x3940, mulmod(mload(0x840), mload(0x9e0), f_q))mstore(0x3960, addmod(1, sub(f_q, mload(0x9e0)), f_q))mstore(0x3980, mulmod(mload(0x3960), 0, f_q))mstore(0x39a0, addmod(mload(0x3940), mload(0x3980), f_q))mstore(0x39c0, mulmod(mload(0x1c0), mload(0x39a0), f_q))mstore(0x39e0, mulmod(mload(0x860), mload(0x9e0), f_q))mstore(0x3a00, mulmod(mload(0x3960), 4, f_q))mstore(0x3a20, addmod(mload(0x39e0), mload(0x3a00), f_q))mstore(0x3a40, addmod(mload(0x39c0), mload(0x3a20), f_q))mstore(0x3a60, addmod(mload(0x3a40), mload(0x420), f_q))mstore(0x3a80, mulmod(mload(0x3a60), mload(0xdc0), f_q))mstore(0x3aa0, addmod(mload(0x2ba0), mload(0x960), f_q))mstore(0x3ac0, addmod(mload(0x3aa0), mload(0x480), f_q))mstore(0x3ae0, mulmod(mload(0x3ac0), mload(0x3a80), f_q))mstore(0x3b00, addmod(mload(0x3920), sub(f_q, mload(0x3ae0)), f_q))mstore(0x3b20, mulmod(mload(0x3b00), mload(0x2200), f_q))mstore(0x3b40, addmod(mload(0x38a0), mload(0x3b20), f_q))mstore(0x3b60, mulmod(mload(0x6a0), mload(0x3b40), f_q))mstore(0x3b80, addmod(mload(0xe00), sub(f_q, mload(0xe40)), f_q))mstore(0x3ba0, mulmod(mload(0x3b80), mload(0x16e0), f_q))mstore(0x3bc0, addmod(mload(0x3b60), mload(0x3ba0), f_q))mstore(0x3be0, mulmod(mload(0x6a0), mload(0x3bc0), f_q))mstore(0x3c00, mulmod(mload(0x3b80), mload(0x2200), f_q))mstore(0x3c20, addmod(mload(0xe00), sub(f_q, mload(0xe20)), f_q))mstore(0x3c40, mulmod(mload(0x3c20), mload(0x3c00), f_q))mstore(0x3c60, addmod(mload(0x3be0), mload(0x3c40), f_q))mstore(0x3c80, mulmod(mload(0x11e0), mload(0x11e0), f_q))mstore(0x3ca0, mulmod(mload(0x3c80), mload(0x11e0), f_q))mstore(0x3cc0, mulmod(mload(0x3ca0), mload(0x11e0), f_q))mstore(0x3ce0, mulmod(1, mload(0x11e0), f_q))mstore(0x3d00, mulmod(1, mload(0x3c80), f_q))mstore(0x3d20, mulmod(1, mload(0x3ca0), f_q))mstore(0x3d40, mulmod(mload(0x3c60), mload(0x1200), f_q))mstore(0x3d60, mulmod(mload(0xfe0), mload(0xfe0), f_q))mstore(0x3d80, mulmod(mload(0x3d60), mload(0xfe0), f_q))mstore(0x3da0, mulmod(mload(0x3d80), mload(0xfe0), f_q))mstore(0x3dc0, mulmod(mload(0xe80), mload(0xe80), f_q))mstore(0x3de0, mulmod(mload(0x3dc0), mload(0xe80), f_q))mstore(0x3e00, mulmod(mload(0x3de0), mload(0xe80), f_q))mstore(0x3e20, mulmod(mload(0x3e00), mload(0xe80), f_q))mstore(0x3e40, mulmod(mload(0x3e20), mload(0xe80), f_q))mstore(0x3e60, mulmod(mload(0x3e40), mload(0xe80), f_q))mstore(0x3e80, mulmod(mload(0x3e60), mload(0xe80), f_q))mstore(0x3ea0, mulmod(mload(0x3e80), mload(0xe80), f_q))mstore(0x3ec0, mulmod(mload(0x3ea0), mload(0xe80), f_q))mstore(0x3ee0, mulmod(mload(0x3ec0), mload(0xe80), f_q))mstore(0x3f00, mulmod(mload(0x3ee0), mload(0xe80), f_q))mstore(0x3f20, mulmod(mload(0x3f00), mload(0xe80), f_q))mstore(0x3f40, mulmod(mload(0x3f20), mload(0xe80), f_q))mstore(0x3f60, mulmod(mload(0x3f40), mload(0xe80), f_q))mstore(0x3f80, mulmod(mload(0x3f60), mload(0xe80), f_q))mstore(0x3fa0, mulmod(mload(0x3f80), mload(0xe80), f_q))mstore(0x3fc0, mulmod(mload(0x3fa0), mload(0xe80), f_q))mstore(0x3fe0, mulmod(mload(0x3fc0), mload(0xe80), f_q))mstore(0x4000, mulmod(mload(0x3fe0), mload(0xe80), f_q))mstore(0x4020, mulmod(mload(0x4000), mload(0xe80), f_q))mstore(0x4040, mulmod(mload(0x4020), mload(0xe80), f_q))mstore(0x4060, mulmod(mload(0x4040), mload(0xe80), f_q))mstore(0x4080, mulmod(mload(0x4060), mload(0xe80), f_q))mstore(0x40a0, mulmod(mload(0x4080), mload(0xe80), f_q))mstore(0x40c0, mulmod(mload(0x40a0), mload(0xe80), f_q))mstore(0x40e0, mulmod(mload(0x40c0), mload(0xe80), f_q))mstore(0x4100, mulmod(mload(0x40e0), mload(0xe80), f_q))mstore(0x4120, mulmod(mload(0x4100), mload(0xe80), f_q))mstore(0x4140, mulmod(mload(0x4120), mload(0xe80), f_q))mstore(0x4160, mulmod(mload(0x4140), mload(0xe80), f_q))mstore(0x4180, mulmod(mload(0x4160), mload(0xe80), f_q))mstore(0x41a0, mulmod(mload(0x4180), mload(0xe80), f_q))mstore(0x41c0, mulmod(mload(0x41a0), mload(0xe80), f_q))mstore(0x41e0, mulmod(mload(0x41c0), mload(0xe80), f_q))mstore(0x4200, mulmod(mload(0x41e0), mload(0xe80), f_q))mstore(0x4220, mulmod(mload(0x4200), mload(0xe80), f_q))mstore(0x4240, mulmod(mload(0x4220), mload(0xe80), f_q))mstore(0x4260, mulmod(sub(f_q, mload(0x840)), 1, f_q))mstore(0x4280, mulmod(sub(f_q, mload(0x860)), mload(0xe80), f_q))mstore(0x42a0, mulmod(1, mload(0xe80), f_q))mstore(0x42c0, addmod(mload(0x4260), mload(0x4280), f_q))mstore(0x42e0, mulmod(sub(f_q, mload(0x880)), mload(0x3dc0), f_q))mstore(0x4300, mulmod(1, mload(0x3dc0), f_q))mstore(0x4320, addmod(mload(0x42c0), mload(0x42e0), f_q))mstore(0x4340, mulmod(sub(f_q, mload(0xb40)), mload(0x3de0), f_q))mstore(0x4360, mulmod(1, mload(0x3de0), f_q))mstore(0x4380, addmod(mload(0x4320), mload(0x4340), f_q))mstore(0x43a0, mulmod(sub(f_q, mload(0xba0)), mload(0x3e00), f_q))mstore(0x43c0, mulmod(1, mload(0x3e00), f_q))mstore(0x43e0, addmod(mload(0x4380), mload(0x43a0), f_q))mstore(0x4400, mulmod(sub(f_q, mload(0xbe0)), mload(0x3e20), f_q))mstore(0x4420, mulmod(1, mload(0x3e20), f_q))mstore(0x4440, addmod(mload(0x43e0), mload(0x4400), f_q))mstore(0x4460, mulmod(sub(f_q, mload(0xc20)), mload(0x3e40), f_q))mstore(0x4480, mulmod(1, mload(0x3e40), f_q))mstore(0x44a0, addmod(mload(0x4440), mload(0x4460), f_q))mstore(0x44c0, mulmod(sub(f_q, mload(0xc60)), mload(0x3e60), f_q))mstore(0x44e0, mulmod(1, mload(0x3e60), f_q))mstore(0x4500, addmod(mload(0x44a0), mload(0x44c0), f_q))mstore(0x4520, mulmod(sub(f_q, mload(0xc80)), mload(0x3e80), f_q))mstore(0x4540, mulmod(1, mload(0x3e80), f_q))mstore(0x4560, addmod(mload(0x4500), mload(0x4520), f_q))mstore(0x4580, mulmod(sub(f_q, mload(0xcc0)), mload(0x3ea0), f_q))mstore(0x45a0, mulmod(1, mload(0x3ea0), f_q))mstore(0x45c0, addmod(mload(0x4560), mload(0x4580), f_q))mstore(0x45e0, mulmod(sub(f_q, mload(0xd00)), mload(0x3ec0), f_q))mstore(0x4600, mulmod(1, mload(0x3ec0), f_q))mstore(0x4620, addmod(mload(0x45c0), mload(0x45e0), f_q))mstore(0x4640, mulmod(sub(f_q, mload(0xd20)), mload(0x3ee0), f_q))mstore(0x4660, mulmod(1, mload(0x3ee0), f_q))mstore(0x4680, addmod(mload(0x4620), mload(0x4640), f_q))mstore(0x46a0, mulmod(sub(f_q, mload(0xd60)), mload(0x3f00), f_q))mstore(0x46c0, mulmod(1, mload(0x3f00), f_q))mstore(0x46e0, addmod(mload(0x4680), mload(0x46a0), f_q))mstore(0x4700, mulmod(sub(f_q, mload(0xda0)), mload(0x3f20), f_q))mstore(0x4720, mulmod(1, mload(0x3f20), f_q))mstore(0x4740, addmod(mload(0x46e0), mload(0x4700), f_q))mstore(0x4760, mulmod(sub(f_q, mload(0xdc0)), mload(0x3f40), f_q))mstore(0x4780, mulmod(1, mload(0x3f40), f_q))mstore(0x47a0, addmod(mload(0x4740), mload(0x4760), f_q))mstore(0x47c0, mulmod(sub(f_q, mload(0xe00)), mload(0x3f60), f_q))mstore(0x47e0, mulmod(1, mload(0x3f60), f_q))mstore(0x4800, addmod(mload(0x47a0), mload(0x47c0), f_q))mstore(0x4820, mulmod(sub(f_q, mload(0xe40)), mload(0x3f80), f_q))mstore(0x4840, mulmod(1, mload(0x3f80), f_q))mstore(0x4860, addmod(mload(0x4800), mload(0x4820), f_q))mstore(0x4880, mulmod(sub(f_q, mload(0x8c0)), mload(0x3fa0), f_q))mstore(0x48a0, mulmod(1, mload(0x3fa0), f_q))mstore(0x48c0, addmod(mload(0x4860), mload(0x4880), f_q))mstore(0x48e0, mulmod(sub(f_q, mload(0x8e0)), mload(0x3fc0), f_q))mstore(0x4900, mulmod(1, mload(0x3fc0), f_q))mstore(0x4920, addmod(mload(0x48c0), mload(0x48e0), f_q))mstore(0x4940, mulmod(sub(f_q, mload(0x900)), mload(0x3fe0), f_q))mstore(0x4960, mulmod(1, mload(0x3fe0), f_q))mstore(0x4980, addmod(mload(0x4920), mload(0x4940), f_q))mstore(0x49a0, mulmod(sub(f_q, mload(0x920)), mload(0x4000), f_q))mstore(0x49c0, mulmod(1, mload(0x4000), f_q))mstore(0x49e0, addmod(mload(0x4980), mload(0x49a0), f_q))mstore(0x4a00, mulmod(sub(f_q, mload(0x940)), mload(0x4020), f_q))mstore(0x4a20, mulmod(1, mload(0x4020), f_q))mstore(0x4a40, addmod(mload(0x49e0), mload(0x4a00), f_q))mstore(0x4a60, mulmod(sub(f_q, mload(0x960)), mload(0x4040), f_q))mstore(0x4a80, mulmod(1, mload(0x4040), f_q))mstore(0x4aa0, addmod(mload(0x4a40), mload(0x4a60), f_q))mstore(0x4ac0, mulmod(sub(f_q, mload(0x980)), mload(0x4060), f_q))mstore(0x4ae0, mulmod(1, mload(0x4060), f_q))mstore(0x4b00, addmod(mload(0x4aa0), mload(0x4ac0), f_q))mstore(0x4b20, mulmod(sub(f_q, mload(0x9a0)), mload(0x4080), f_q))mstore(0x4b40, mulmod(1, mload(0x4080), f_q))mstore(0x4b60, addmod(mload(0x4b00), mload(0x4b20), f_q))mstore(0x4b80, mulmod(sub(f_q, mload(0x9c0)), mload(0x40a0), f_q))mstore(0x4ba0, mulmod(1, mload(0x40a0), f_q))mstore(0x4bc0, addmod(mload(0x4b60), mload(0x4b80), f_q))mstore(0x4be0, mulmod(sub(f_q, mload(0x9e0)), mload(0x40c0), f_q))mstore(0x4c00, mulmod(1, mload(0x40c0), f_q))mstore(0x4c20, addmod(mload(0x4bc0), mload(0x4be0), f_q))mstore(0x4c40, mulmod(sub(f_q, mload(0xa00)), mload(0x40e0), f_q))mstore(0x4c60, mulmod(1, mload(0x40e0), f_q))mstore(0x4c80, addmod(mload(0x4c20), mload(0x4c40), f_q))mstore(0x4ca0, mulmod(sub(f_q, mload(0xa20)), mload(0x4100), f_q))mstore(0x4cc0, mulmod(1, mload(0x4100), f_q))mstore(0x4ce0, addmod(mload(0x4c80), mload(0x4ca0), f_q))mstore(0x4d00, mulmod(sub(f_q, mload(0xa40)), mload(0x4120), f_q))mstore(0x4d20, mulmod(1, mload(0x4120), f_q))mstore(0x4d40, addmod(mload(0x4ce0), mload(0x4d00), f_q))mstore(0x4d60, mulmod(sub(f_q, mload(0xa60)), mload(0x4140), f_q))mstore(0x4d80, mulmod(1, mload(0x4140), f_q))mstore(0x4da0, addmod(mload(0x4d40), mload(0x4d60), f_q))mstore(0x4dc0, addmod(mload(0x48a0), mload(0x4d80), f_q))mstore(0x4de0, mulmod(sub(f_q, mload(0xaa0)), mload(0x4160), f_q))mstore(0x4e00, mulmod(1, mload(0x4160), f_q))mstore(0x4e20, addmod(mload(0x4da0), mload(0x4de0), f_q))mstore(0x4e40, mulmod(sub(f_q, mload(0xac0)), mload(0x4180), f_q))mstore(0x4e60, mulmod(1, mload(0x4180), f_q))mstore(0x4e80, addmod(mload(0x4e20), mload(0x4e40), f_q))mstore(0x4ea0, mulmod(sub(f_q, mload(0xae0)), mload(0x41a0), f_q))mstore(0x4ec0, mulmod(1, mload(0x41a0), f_q))mstore(0x4ee0, addmod(mload(0x4e80), mload(0x4ea0), f_q))mstore(0x4f00, mulmod(sub(f_q, mload(0xb00)), mload(0x41c0), f_q))mstore(0x4f20, mulmod(1, mload(0x41c0), f_q))mstore(0x4f40, addmod(mload(0x4ee0), mload(0x4f00), f_q))mstore(0x4f60, mulmod(sub(f_q, mload(0xb20)), mload(0x41e0), f_q))mstore(0x4f80, mulmod(1, mload(0x41e0), f_q))mstore(0x4fa0, addmod(mload(0x4f40), mload(0x4f60), f_q))mstore(0x4fc0, mulmod(sub(f_q, mload(0x3d40)), mload(0x4200), f_q))mstore(0x4fe0, mulmod(1, mload(0x4200), f_q))mstore(0x5000, mulmod(mload(0x3ce0), mload(0x4200), f_q))mstore(0x5020, mulmod(mload(0x3d00), mload(0x4200), f_q))mstore(0x5040, mulmod(mload(0x3d20), mload(0x4200), f_q))mstore(0x5060, addmod(mload(0x4fa0), mload(0x4fc0), f_q))mstore(0x5080, mulmod(sub(f_q, mload(0xa80)), mload(0x4220), f_q))mstore(0x50a0, mulmod(1, mload(0x4220), f_q))mstore(0x50c0, addmod(mload(0x5060), mload(0x5080), f_q))mstore(0x50e0, mulmod(mload(0x50c0), 1, f_q))mstore(0x5100, mulmod(mload(0x42a0), 1, f_q))mstore(0x5120, mulmod(mload(0x4300), 1, f_q))mstore(0x5140, mulmod(mload(0x4360), 1, f_q))mstore(0x5160, mulmod(mload(0x43c0), 1, f_q))mstore(0x5180, mulmod(mload(0x4420), 1, f_q))mstore(0x51a0, mulmod(mload(0x4480), 1, f_q))mstore(0x51c0, mulmod(mload(0x44e0), 1, f_q))mstore(0x51e0, mulmod(mload(0x4540), 1, f_q))mstore(0x5200, mulmod(mload(0x45a0), 1, f_q))mstore(0x5220, mulmod(mload(0x4600), 1, f_q))mstore(0x5240, mulmod(mload(0x4660), 1, f_q))mstore(0x5260, mulmod(mload(0x46c0), 1, f_q))mstore(0x5280, mulmod(mload(0x4720), 1, f_q))mstore(0x52a0, mulmod(mload(0x4780), 1, f_q))mstore(0x52c0, mulmod(mload(0x47e0), 1, f_q))mstore(0x52e0, mulmod(mload(0x4840), 1, f_q))mstore(0x5300, mulmod(mload(0x4dc0), 1, f_q))mstore(0x5320, mulmod(mload(0x4900), 1, f_q))mstore(0x5340, mulmod(mload(0x4960), 1, f_q))mstore(0x5360, mulmod(mload(0x49c0), 1, f_q))mstore(0x5380, mulmod(mload(0x4a20), 1, f_q))mstore(0x53a0, mulmod(mload(0x4a80), 1, f_q))mstore(0x53c0, mulmod(mload(0x4ae0), 1, f_q))mstore(0x53e0, mulmod(mload(0x4b40), 1, f_q))mstore(0x5400, mulmod(mload(0x4ba0), 1, f_q))mstore(0x5420, mulmod(mload(0x4c00), 1, f_q))mstore(0x5440, mulmod(mload(0x4c60), 1, f_q))mstore(0x5460, mulmod(mload(0x4cc0), 1, f_q))mstore(0x5480, mulmod(mload(0x4d20), 1, f_q))mstore(0x54a0, mulmod(mload(0x4e00), 1, f_q))mstore(0x54c0, mulmod(mload(0x4e60), 1, f_q))mstore(0x54e0, mulmod(mload(0x4ec0), 1, f_q))mstore(0x5500, mulmod(mload(0x4f20), 1, f_q))mstore(0x5520, mulmod(mload(0x4f80), 1, f_q))mstore(0x5540, mulmod(mload(0x4fe0), 1, f_q))mstore(0x5560, mulmod(mload(0x5000), 1, f_q))mstore(0x5580, mulmod(mload(0x5020), 1, f_q))mstore(0x55a0, mulmod(mload(0x5040), 1, f_q))mstore(0x55c0, mulmod(mload(0x50a0), 1, f_q))mstore(0x55e0, mulmod(sub(f_q, mload(0x8a0)), 1, f_q))mstore(0x5600, mulmod(sub(f_q, mload(0xc40)), mload(0xe80), f_q))mstore(0x5620, addmod(mload(0x55e0), mload(0x5600), f_q))mstore(0x5640, mulmod(sub(f_q, mload(0xce0)), mload(0x3dc0), f_q))mstore(0x5660, addmod(mload(0x5620), mload(0x5640), f_q))mstore(0x5680, mulmod(sub(f_q, mload(0xd80)), mload(0x3de0), f_q))mstore(0x56a0, addmod(mload(0x5660), mload(0x5680), f_q))mstore(0x56c0, mulmod(sub(f_q, mload(0xe20)), mload(0x3e00), f_q))mstore(0x56e0, addmod(mload(0x56a0), mload(0x56c0), f_q))mstore(0x5700, mulmod(mload(0x56e0), mload(0xfe0), f_q))mstore(0x5720, mulmod(1, mload(0xfe0), f_q))mstore(0x5740, mulmod(mload(0x42a0), mload(0xfe0), f_q))mstore(0x5760, mulmod(mload(0x4300), mload(0xfe0), f_q))mstore(0x5780, mulmod(mload(0x4360), mload(0xfe0), f_q))mstore(0x57a0, mulmod(mload(0x43c0), mload(0xfe0), f_q))mstore(0x57c0, addmod(mload(0x50e0), mload(0x5700), f_q))mstore(0x57e0, addmod(mload(0x5120), mload(0x5720), f_q))mstore(0x5800, addmod(mload(0x51a0), mload(0x5740), f_q))mstore(0x5820, addmod(mload(0x5200), mload(0x5760), f_q))mstore(0x5840, addmod(mload(0x5260), mload(0x5780), f_q))mstore(0x5860, addmod(mload(0x52c0), mload(0x57a0), f_q))mstore(0x5880, mulmod(sub(f_q, mload(0xb60)), 1, f_q))mstore(0x58a0, mulmod(sub(f_q, mload(0xbc0)), mload(0xe80), f_q))mstore(0x58c0, addmod(mload(0x5880), mload(0x58a0), f_q))mstore(0x58e0, mulmod(sub(f_q, mload(0xc00)), mload(0x3dc0), f_q))mstore(0x5900, addmod(mload(0x58c0), mload(0x58e0), f_q))mstore(0x5920, mulmod(sub(f_q, mload(0xca0)), mload(0x3de0), f_q))mstore(0x5940, addmod(mload(0x5900), mload(0x5920), f_q))mstore(0x5960, mulmod(sub(f_q, mload(0xd40)), mload(0x3e00), f_q))mstore(0x5980, addmod(mload(0x5940), mload(0x5960), f_q))mstore(0x59a0, mulmod(sub(f_q, mload(0xde0)), mload(0x3e20), f_q))mstore(0x59c0, addmod(mload(0x5980), mload(0x59a0), f_q))mstore(0x59e0, mulmod(mload(0x59c0), mload(0x3d60), f_q))mstore(0x5a00, mulmod(1, mload(0x3d60), f_q))mstore(0x5a20, mulmod(mload(0x42a0), mload(0x3d60), f_q))mstore(0x5a40, mulmod(mload(0x4300), mload(0x3d60), f_q))mstore(0x5a60, mulmod(mload(0x4360), mload(0x3d60), f_q))mstore(0x5a80, mulmod(mload(0x43c0), mload(0x3d60), f_q))mstore(0x5aa0, mulmod(mload(0x4420), mload(0x3d60), f_q))mstore(0x5ac0, addmod(mload(0x57c0), mload(0x59e0), f_q))mstore(0x5ae0, addmod(mload(0x5140), mload(0x5a00), f_q))mstore(0x5b00, addmod(mload(0x5160), mload(0x5a20), f_q))mstore(0x5b20, addmod(mload(0x5180), mload(0x5a40), f_q))mstore(0x5b40, addmod(mload(0x51e0), mload(0x5a60), f_q))mstore(0x5b60, addmod(mload(0x5240), mload(0x5a80), f_q))mstore(0x5b80, addmod(mload(0x52a0), mload(0x5aa0), f_q))mstore(0x5ba0, mulmod(sub(f_q, mload(0xb80)), 1, f_q))mstore(0x5bc0, mulmod(mload(0x5ba0), mload(0x3d80), f_q))mstore(0x5be0, mulmod(1, mload(0x3d80), f_q))mstore(0x5c00, addmod(mload(0x5ac0), mload(0x5bc0), f_q))mstore(0x5c20, addmod(mload(0x5ae0), mload(0x5be0), f_q))mstore(0x5c40, mulmod(1, mload(0x800), f_q))mstore(0x5c60, mulmod(1, mload(0x5c40), f_q))mstore(0x5c80, mulmod(14204982954615820785730815556166377574172276341958019443243371773666809943588, mload(0x800), f_q))mstore(0x5ca0, mulmod(mload(0x5720), mload(0x5c80), f_q))mstore(0x5cc0, mulmod(19671853614403325433334785013442879012032153960035114761748042217991436932142, mload(0x800), f_q))mstore(0x5ce0, mulmod(mload(0x5a00), mload(0x5cc0), f_q))mstore(0x5d00, mulmod(16352530144570232727633744131804667993120004373047725463318648550785966993151, mload(0x800), f_q))mstore(0x5d20, mulmod(mload(0x5be0), mload(0x5d00), f_q))mstore(0x5d40, 0x0000000000000000000000000000000000000000000000000000000000000001)                    mstore(0x5d60, 0x0000000000000000000000000000000000000000000000000000000000000002)mstore(0x5d80, mload(0x5c00))success := and(eq(staticcall(gas(), 0x7, 0x5d40, 0x60, 0x5d40, 0x40), 1), success)mstore(0x5da0, mload(0x5d40))                    mstore(0x5dc0, mload(0x5d60))mstore(0x5de0, mload(0xe0))                    mstore(0x5e00, mload(0x100))success := and(eq(staticcall(gas(), 0x6, 0x5da0, 0x80, 0x5da0, 0x40), 1), success)mstore(0x5e20, mload(0x120))                    mstore(0x5e40, mload(0x140))mstore(0x5e60, mload(0x5100))success := and(eq(staticcall(gas(), 0x7, 0x5e20, 0x60, 0x5e20, 0x40), 1), success)mstore(0x5e80, mload(0x5da0))                    mstore(0x5ea0, mload(0x5dc0))mstore(0x5ec0, mload(0x5e20))                    mstore(0x5ee0, mload(0x5e40))success := and(eq(staticcall(gas(), 0x6, 0x5e80, 0x80, 0x5e80, 0x40), 1), success)mstore(0x5f00, mload(0x160))                    mstore(0x5f20, mload(0x180))mstore(0x5f40, mload(0x57e0))success := and(eq(staticcall(gas(), 0x7, 0x5f00, 0x60, 0x5f00, 0x40), 1), success)mstore(0x5f60, mload(0x5e80))                    mstore(0x5f80, mload(0x5ea0))mstore(0x5fa0, mload(0x5f00))                    mstore(0x5fc0, mload(0x5f20))success := and(eq(staticcall(gas(), 0x6, 0x5f60, 0x80, 0x5f60, 0x40), 1), success)mstore(0x5fe0, mload(0x4c0))                    mstore(0x6000, mload(0x4e0))mstore(0x6020, mload(0x5c20))success := and(eq(staticcall(gas(), 0x7, 0x5fe0, 0x60, 0x5fe0, 0x40), 1), success)mstore(0x6040, mload(0x5f60))                    mstore(0x6060, mload(0x5f80))mstore(0x6080, mload(0x5fe0))                    mstore(0x60a0, mload(0x6000))success := and(eq(staticcall(gas(), 0x6, 0x6040, 0x80, 0x6040, 0x40), 1), success)mstore(0x60c0, mload(0x500))                    mstore(0x60e0, mload(0x520))mstore(0x6100, mload(0x5b00))success := and(eq(staticcall(gas(), 0x7, 0x60c0, 0x60, 0x60c0, 0x40), 1), success)mstore(0x6120, mload(0x6040))                    mstore(0x6140, mload(0x6060))mstore(0x6160, mload(0x60c0))                    mstore(0x6180, mload(0x60e0))success := and(eq(staticcall(gas(), 0x6, 0x6120, 0x80, 0x6120, 0x40), 1), success)mstore(0x61a0, mload(0x540))                    mstore(0x61c0, mload(0x560))mstore(0x61e0, mload(0x5b20))success := and(eq(staticcall(gas(), 0x7, 0x61a0, 0x60, 0x61a0, 0x40), 1), success)mstore(0x6200, mload(0x6120))                    mstore(0x6220, mload(0x6140))mstore(0x6240, mload(0x61a0))                    mstore(0x6260, mload(0x61c0))success := and(eq(staticcall(gas(), 0x6, 0x6200, 0x80, 0x6200, 0x40), 1), success)mstore(0x6280, mload(0x200))                    mstore(0x62a0, mload(0x220))mstore(0x62c0, mload(0x5800))success := and(eq(staticcall(gas(), 0x7, 0x6280, 0x60, 0x6280, 0x40), 1), success)mstore(0x62e0, mload(0x6200))                    mstore(0x6300, mload(0x6220))mstore(0x6320, mload(0x6280))                    mstore(0x6340, mload(0x62a0))success := and(eq(staticcall(gas(), 0x6, 0x62e0, 0x80, 0x62e0, 0x40), 1), success)mstore(0x6360, mload(0x240))                    mstore(0x6380, mload(0x260))mstore(0x63a0, mload(0x51c0))success := and(eq(staticcall(gas(), 0x7, 0x6360, 0x60, 0x6360, 0x40), 1), success)mstore(0x63c0, mload(0x62e0))                    mstore(0x63e0, mload(0x6300))mstore(0x6400, mload(0x6360))                    mstore(0x6420, mload(0x6380))success := and(eq(staticcall(gas(), 0x6, 0x63c0, 0x80, 0x63c0, 0x40), 1), success)mstore(0x6440, mload(0x580))                    mstore(0x6460, mload(0x5a0))mstore(0x6480, mload(0x5b40))success := and(eq(staticcall(gas(), 0x7, 0x6440, 0x60, 0x6440, 0x40), 1), success)mstore(0x64a0, mload(0x63c0))                    mstore(0x64c0, mload(0x63e0))mstore(0x64e0, mload(0x6440))                    mstore(0x6500, mload(0x6460))success := and(eq(staticcall(gas(), 0x6, 0x64a0, 0x80, 0x64a0, 0x40), 1), success)mstore(0x6520, mload(0x280))                    mstore(0x6540, mload(0x2a0))mstore(0x6560, mload(0x5820))success := and(eq(staticcall(gas(), 0x7, 0x6520, 0x60, 0x6520, 0x40), 1), success)mstore(0x6580, mload(0x64a0))                    mstore(0x65a0, mload(0x64c0))mstore(0x65c0, mload(0x6520))                    mstore(0x65e0, mload(0x6540))success := and(eq(staticcall(gas(), 0x6, 0x6580, 0x80, 0x6580, 0x40), 1), success)mstore(0x6600, mload(0x2c0))                    mstore(0x6620, mload(0x2e0))mstore(0x6640, mload(0x5220))success := and(eq(staticcall(gas(), 0x7, 0x6600, 0x60, 0x6600, 0x40), 1), success)mstore(0x6660, mload(0x6580))                    mstore(0x6680, mload(0x65a0))mstore(0x66a0, mload(0x6600))                    mstore(0x66c0, mload(0x6620))success := and(eq(staticcall(gas(), 0x6, 0x6660, 0x80, 0x6660, 0x40), 1), success)mstore(0x66e0, mload(0x5c0))                    mstore(0x6700, mload(0x5e0))mstore(0x6720, mload(0x5b60))success := and(eq(staticcall(gas(), 0x7, 0x66e0, 0x60, 0x66e0, 0x40), 1), success)mstore(0x6740, mload(0x6660))                    mstore(0x6760, mload(0x6680))mstore(0x6780, mload(0x66e0))                    mstore(0x67a0, mload(0x6700))success := and(eq(staticcall(gas(), 0x6, 0x6740, 0x80, 0x6740, 0x40), 1), success)mstore(0x67c0, mload(0x300))                    mstore(0x67e0, mload(0x320))mstore(0x6800, mload(0x5840))success := and(eq(staticcall(gas(), 0x7, 0x67c0, 0x60, 0x67c0, 0x40), 1), success)mstore(0x6820, mload(0x6740))                    mstore(0x6840, mload(0x6760))mstore(0x6860, mload(0x67c0))                    mstore(0x6880, mload(0x67e0))success := and(eq(staticcall(gas(), 0x6, 0x6820, 0x80, 0x6820, 0x40), 1), success)mstore(0x68a0, mload(0x340))                    mstore(0x68c0, mload(0x360))mstore(0x68e0, mload(0x5280))success := and(eq(staticcall(gas(), 0x7, 0x68a0, 0x60, 0x68a0, 0x40), 1), success)mstore(0x6900, mload(0x6820))                    mstore(0x6920, mload(0x6840))mstore(0x6940, mload(0x68a0))                    mstore(0x6960, mload(0x68c0))success := and(eq(staticcall(gas(), 0x6, 0x6900, 0x80, 0x6900, 0x40), 1), success)mstore(0x6980, mload(0x600))                    mstore(0x69a0, mload(0x620))mstore(0x69c0, mload(0x5b80))success := and(eq(staticcall(gas(), 0x7, 0x6980, 0x60, 0x6980, 0x40), 1), success)mstore(0x69e0, mload(0x6900))                    mstore(0x6a00, mload(0x6920))mstore(0x6a20, mload(0x6980))                    mstore(0x6a40, mload(0x69a0))success := and(eq(staticcall(gas(), 0x6, 0x69e0, 0x80, 0x69e0, 0x40), 1), success)mstore(0x6a60, mload(0x380))                    mstore(0x6a80, mload(0x3a0))mstore(0x6aa0, mload(0x5860))success := and(eq(staticcall(gas(), 0x7, 0x6a60, 0x60, 0x6a60, 0x40), 1), success)mstore(0x6ac0, mload(0x69e0))                    mstore(0x6ae0, mload(0x6a00))mstore(0x6b00, mload(0x6a60))                    mstore(0x6b20, mload(0x6a80))success := and(eq(staticcall(gas(), 0x6, 0x6ac0, 0x80, 0x6ac0, 0x40), 1), success)mstore(0x6b40, mload(0x3c0))                    mstore(0x6b60, mload(0x3e0))mstore(0x6b80, mload(0x52e0))success := and(eq(staticcall(gas(), 0x7, 0x6b40, 0x60, 0x6b40, 0x40), 1), success)mstore(0x6ba0, mload(0x6ac0))                    mstore(0x6bc0, mload(0x6ae0))mstore(0x6be0, mload(0x6b40))                    mstore(0x6c00, mload(0x6b60))success := and(eq(staticcall(gas(), 0x6, 0x6ba0, 0x80, 0x6ba0, 0x40), 1), success)mstore(0x6c20, 0x0000000000000000000000000000000000000000000000000000000000000000)                    mstore(0x6c40, 0x0000000000000000000000000000000000000000000000000000000000000000)mstore(0x6c60, mload(0x5300))success := and(eq(staticcall(gas(), 0x7, 0x6c20, 0x60, 0x6c20, 0x40), 1), success)mstore(0x6c80, mload(0x6ba0))                    mstore(0x6ca0, mload(0x6bc0))mstore(0x6cc0, mload(0x6c20))                    mstore(0x6ce0, mload(0x6c40))success := and(eq(staticcall(gas(), 0x6, 0x6c80, 0x80, 0x6c80, 0x40), 1), success)mstore(0x6d00, 0x20bbf27f485c45a951af33247c9c1e29937fc756d7ac756c20eb625e480c4b09)                    mstore(0x6d20, 0x22f8de8bb3c084ce5499afe2187541ba5c0745385f6bf9dbee9f323cc8f3916a)mstore(0x6d40, mload(0x5320))success := and(eq(staticcall(gas(), 0x7, 0x6d00, 0x60, 0x6d00, 0x40), 1), success)mstore(0x6d60, mload(0x6c80))                    mstore(0x6d80, mload(0x6ca0))mstore(0x6da0, mload(0x6d00))                    mstore(0x6dc0, mload(0x6d20))success := and(eq(staticcall(gas(), 0x6, 0x6d60, 0x80, 0x6d60, 0x40), 1), success)mstore(0x6de0, 0x215277db13595495e91385ac0f8994403a5e1bb75f194c50f0f6c306577745c9)                    mstore(0x6e00, 0x25e8990fbffd94cd49170c18bb81305c062e02b061c7bf5de1558667c57044e7)mstore(0x6e20, mload(0x5340))success := and(eq(staticcall(gas(), 0x7, 0x6de0, 0x60, 0x6de0, 0x40), 1), success)mstore(0x6e40, mload(0x6d60))                    mstore(0x6e60, mload(0x6d80))mstore(0x6e80, mload(0x6de0))                    mstore(0x6ea0, mload(0x6e00))success := and(eq(staticcall(gas(), 0x6, 0x6e40, 0x80, 0x6e40, 0x40), 1), success)mstore(0x6ec0, 0x0a14b7ef454155625c7e94adc138435ef274094f0621b7049dd54c5f6de81be2)                    mstore(0x6ee0, 0x071eac8982c1a5edc5af787872e5327079a3f43a44db026166229ee98afcaf68)mstore(0x6f00, mload(0x5360))success := and(eq(staticcall(gas(), 0x7, 0x6ec0, 0x60, 0x6ec0, 0x40), 1), success)mstore(0x6f20, mload(0x6e40))                    mstore(0x6f40, mload(0x6e60))mstore(0x6f60, mload(0x6ec0))                    mstore(0x6f80, mload(0x6ee0))success := and(eq(staticcall(gas(), 0x6, 0x6f20, 0x80, 0x6f20, 0x40), 1), success)mstore(0x6fa0, 0x1e4bccbf7d101d4624fd5eb740ea0611a7fb1ae52d555c0c80747f02655314a7)                    mstore(0x6fc0, 0x170fec95684bea33a58e0b094e96203e2b4bd911759be5b2384e9c2b1d604fde)mstore(0x6fe0, mload(0x5380))success := and(eq(staticcall(gas(), 0x7, 0x6fa0, 0x60, 0x6fa0, 0x40), 1), success)mstore(0x7000, mload(0x6f20))                    mstore(0x7020, mload(0x6f40))mstore(0x7040, mload(0x6fa0))                    mstore(0x7060, mload(0x6fc0))success := and(eq(staticcall(gas(), 0x6, 0x7000, 0x80, 0x7000, 0x40), 1), success)mstore(0x7080, 0x0e5e9e5fd5e4c4ea741a5e08f22007b6ca4f6a55e2c0d6715d6586a89a2f1445)                    mstore(0x70a0, 0x143c54b2d0e687bdaa52209cf0e3d7086a3ba9fcf34be34ad463c86c07ed1bfd)mstore(0x70c0, mload(0x53a0))success := and(eq(staticcall(gas(), 0x7, 0x7080, 0x60, 0x7080, 0x40), 1), success)mstore(0x70e0, mload(0x7000))                    mstore(0x7100, mload(0x7020))mstore(0x7120, mload(0x7080))                    mstore(0x7140, mload(0x70a0))success := and(eq(staticcall(gas(), 0x6, 0x70e0, 0x80, 0x70e0, 0x40), 1), success)mstore(0x7160, 0x0142e6d3594a8d314fa233ee61275dd514ce066258b800db7bfde5285811b7be)                    mstore(0x7180, 0x047a47eab84a9cd9e52ae3eb3a95698b8a6d83067b4e22b081252dcf6e682b4f)mstore(0x71a0, mload(0x53c0))success := and(eq(staticcall(gas(), 0x7, 0x7160, 0x60, 0x7160, 0x40), 1), success)mstore(0x71c0, mload(0x70e0))                    mstore(0x71e0, mload(0x7100))mstore(0x7200, mload(0x7160))                    mstore(0x7220, mload(0x7180))success := and(eq(staticcall(gas(), 0x6, 0x71c0, 0x80, 0x71c0, 0x40), 1), success)mstore(0x7240, 0x0c55048406105d3f30f5fa36d2597bafa950a3044838099e0165ab6d32a905d5)                    mstore(0x7260, 0x08acc20a546af4363c715c0505b4c7d2097521b6758908c5abcef84ffa5062b7)mstore(0x7280, mload(0x53e0))success := and(eq(staticcall(gas(), 0x7, 0x7240, 0x60, 0x7240, 0x40), 1), success)mstore(0x72a0, mload(0x71c0))                    mstore(0x72c0, mload(0x71e0))mstore(0x72e0, mload(0x7240))                    mstore(0x7300, mload(0x7260))success := and(eq(staticcall(gas(), 0x6, 0x72a0, 0x80, 0x72a0, 0x40), 1), success)mstore(0x7320, 0x1869c5b9b0127c63a6f00cff0ad8d290c0c1d9a78d74d932b81ef9385f8f1a7f)                    mstore(0x7340, 0x24a9e6c6844f12192db2a3065a566ad8d0b6942c87a5e0dcafa64dfa7c00b2b5)mstore(0x7360, mload(0x5400))success := and(eq(staticcall(gas(), 0x7, 0x7320, 0x60, 0x7320, 0x40), 1), success)mstore(0x7380, mload(0x72a0))                    mstore(0x73a0, mload(0x72c0))mstore(0x73c0, mload(0x7320))                    mstore(0x73e0, mload(0x7340))success := and(eq(staticcall(gas(), 0x6, 0x7380, 0x80, 0x7380, 0x40), 1), success)mstore(0x7400, 0x24eb5df4c35ffba57cd2270403e5aea3cc666f2de23b422a7eec67a6dcd75395)                    mstore(0x7420, 0x0aee6fa0c62ff6c4b14ca68de6cf62f9fcf78101cebffc2ea8868396d6e5e281)mstore(0x7440, mload(0x5420))success := and(eq(staticcall(gas(), 0x7, 0x7400, 0x60, 0x7400, 0x40), 1), success)mstore(0x7460, mload(0x7380))                    mstore(0x7480, mload(0x73a0))mstore(0x74a0, mload(0x7400))                    mstore(0x74c0, mload(0x7420))success := and(eq(staticcall(gas(), 0x6, 0x7460, 0x80, 0x7460, 0x40), 1), success)mstore(0x74e0, 0x031caad6adad6b9da0f98285f913059bbe2bbe6d51389498fa4308c28d69542e)                    mstore(0x7500, 0x3063642446e8cb90f665f536ba3c46b5b55665defae61604d069a69577efa681)mstore(0x7520, mload(0x5440))success := and(eq(staticcall(gas(), 0x7, 0x74e0, 0x60, 0x74e0, 0x40), 1), success)mstore(0x7540, mload(0x7460))                    mstore(0x7560, mload(0x7480))mstore(0x7580, mload(0x74e0))                    mstore(0x75a0, mload(0x7500))success := and(eq(staticcall(gas(), 0x6, 0x7540, 0x80, 0x7540, 0x40), 1), success)mstore(0x75c0, 0x27a78116037bc02bbe01c66d6b3a39947d735706a5b804343bb49b00deed535f)                    mstore(0x75e0, 0x071d958a44ff4b93ff7e33b830bb01266b35ec5507597a142f7b3887d16bb2d1)mstore(0x7600, mload(0x5460))success := and(eq(staticcall(gas(), 0x7, 0x75c0, 0x60, 0x75c0, 0x40), 1), success)mstore(0x7620, mload(0x7540))                    mstore(0x7640, mload(0x7560))mstore(0x7660, mload(0x75c0))                    mstore(0x7680, mload(0x75e0))success := and(eq(staticcall(gas(), 0x6, 0x7620, 0x80, 0x7620, 0x40), 1), success)mstore(0x76a0, 0x1424fc1b5d40b40f7309d8e89a2717759d60101794af06ce4c1849103b8dcb9c)                    mstore(0x76c0, 0x073ef9fb7483002b8282af30638e36740dd545240e7fee89f43216b2b235e94d)mstore(0x76e0, mload(0x5480))success := and(eq(staticcall(gas(), 0x7, 0x76a0, 0x60, 0x76a0, 0x40), 1), success)mstore(0x7700, mload(0x7620))                    mstore(0x7720, mload(0x7640))mstore(0x7740, mload(0x76a0))                    mstore(0x7760, mload(0x76c0))success := and(eq(staticcall(gas(), 0x6, 0x7700, 0x80, 0x7700, 0x40), 1), success)mstore(0x7780, 0x11a24de6fea079f1abd5c0c741194aca2783dce7fae19e97874b8ae99a251da5)                    mstore(0x77a0, 0x2a4c8a1c4b6df30a20dcf1b8ce2c4d42a6350216fba62ab958c6e4014da9b803)mstore(0x77c0, mload(0x54a0))success := and(eq(staticcall(gas(), 0x7, 0x7780, 0x60, 0x7780, 0x40), 1), success)mstore(0x77e0, mload(0x7700))                    mstore(0x7800, mload(0x7720))mstore(0x7820, mload(0x7780))                    mstore(0x7840, mload(0x77a0))success := and(eq(staticcall(gas(), 0x6, 0x77e0, 0x80, 0x77e0, 0x40), 1), success)mstore(0x7860, 0x28f70c585f5359f54d3d06787432c36a2208d51ffd34e5d2c620cfaaf4475a0d)                    mstore(0x7880, 0x0458749099785d92aa5c129e69ddd714367a5fba323ca82023ee7358ba5aef0a)mstore(0x78a0, mload(0x54c0))success := and(eq(staticcall(gas(), 0x7, 0x7860, 0x60, 0x7860, 0x40), 1), success)mstore(0x78c0, mload(0x77e0))                    mstore(0x78e0, mload(0x7800))mstore(0x7900, mload(0x7860))                    mstore(0x7920, mload(0x7880))success := and(eq(staticcall(gas(), 0x6, 0x78c0, 0x80, 0x78c0, 0x40), 1), success)mstore(0x7940, 0x17a77f3cefcebbe37be75e4df6cb18b62140c229658208cf7daaf16a6c0bcd4e)                    mstore(0x7960, 0x2d3fbbdae58502dd2d91045d231b8651e47100efd059b87c7cda7b7b990bfbec)mstore(0x7980, mload(0x54e0))success := and(eq(staticcall(gas(), 0x7, 0x7940, 0x60, 0x7940, 0x40), 1), success)mstore(0x79a0, mload(0x78c0))                    mstore(0x79c0, mload(0x78e0))mstore(0x79e0, mload(0x7940))                    mstore(0x7a00, mload(0x7960))success := and(eq(staticcall(gas(), 0x6, 0x79a0, 0x80, 0x79a0, 0x40), 1), success)mstore(0x7a20, 0x22007b4cf487cdf9fc813b6c1099db8592380fce4fb4326afa1b934b819a5af0)                    mstore(0x7a40, 0x1d4d980b223b1ca51dee961e95f9ad70468fac566153dcf5156399de35e883b9)mstore(0x7a60, mload(0x5500))success := and(eq(staticcall(gas(), 0x7, 0x7a20, 0x60, 0x7a20, 0x40), 1), success)mstore(0x7a80, mload(0x79a0))                    mstore(0x7aa0, mload(0x79c0))mstore(0x7ac0, mload(0x7a20))                    mstore(0x7ae0, mload(0x7a40))success := and(eq(staticcall(gas(), 0x6, 0x7a80, 0x80, 0x7a80, 0x40), 1), success)mstore(0x7b00, 0x088931b6933831d6899ae7ce9a1052284545afff9f21a235e61ad1decbf06f9f)                    mstore(0x7b20, 0x248c0912aa97d903345b691d643dc9407aca9dab62bf3fa8dd2200c1283c4a5c)mstore(0x7b40, mload(0x5520))success := and(eq(staticcall(gas(), 0x7, 0x7b00, 0x60, 0x7b00, 0x40), 1), success)mstore(0x7b60, mload(0x7a80))                    mstore(0x7b80, mload(0x7aa0))mstore(0x7ba0, mload(0x7b00))                    mstore(0x7bc0, mload(0x7b20))success := and(eq(staticcall(gas(), 0x6, 0x7b60, 0x80, 0x7b60, 0x40), 1), success)mstore(0x7be0, mload(0x6e0))                    mstore(0x7c00, mload(0x700))mstore(0x7c20, mload(0x5540))success := and(eq(staticcall(gas(), 0x7, 0x7be0, 0x60, 0x7be0, 0x40), 1), success)mstore(0x7c40, mload(0x7b60))                    mstore(0x7c60, mload(0x7b80))mstore(0x7c80, mload(0x7be0))                    mstore(0x7ca0, mload(0x7c00))success := and(eq(staticcall(gas(), 0x6, 0x7c40, 0x80, 0x7c40, 0x40), 1), success)mstore(0x7cc0, mload(0x720))                    mstore(0x7ce0, mload(0x740))mstore(0x7d00, mload(0x5560))success := and(eq(staticcall(gas(), 0x7, 0x7cc0, 0x60, 0x7cc0, 0x40), 1), success)mstore(0x7d20, mload(0x7c40))                    mstore(0x7d40, mload(0x7c60))mstore(0x7d60, mload(0x7cc0))                    mstore(0x7d80, mload(0x7ce0))success := and(eq(staticcall(gas(), 0x6, 0x7d20, 0x80, 0x7d20, 0x40), 1), success)mstore(0x7da0, mload(0x760))                    mstore(0x7dc0, mload(0x780))mstore(0x7de0, mload(0x5580))success := and(eq(staticcall(gas(), 0x7, 0x7da0, 0x60, 0x7da0, 0x40), 1), success)mstore(0x7e00, mload(0x7d20))                    mstore(0x7e20, mload(0x7d40))mstore(0x7e40, mload(0x7da0))                    mstore(0x7e60, mload(0x7dc0))success := and(eq(staticcall(gas(), 0x6, 0x7e00, 0x80, 0x7e00, 0x40), 1), success)mstore(0x7e80, mload(0x7a0))                    mstore(0x7ea0, mload(0x7c0))mstore(0x7ec0, mload(0x55a0))success := and(eq(staticcall(gas(), 0x7, 0x7e80, 0x60, 0x7e80, 0x40), 1), success)mstore(0x7ee0, mload(0x7e00))                    mstore(0x7f00, mload(0x7e20))mstore(0x7f20, mload(0x7e80))                    mstore(0x7f40, mload(0x7ea0))success := and(eq(staticcall(gas(), 0x6, 0x7ee0, 0x80, 0x7ee0, 0x40), 1), success)mstore(0x7f60, mload(0x640))                    mstore(0x7f80, mload(0x660))mstore(0x7fa0, mload(0x55c0))success := and(eq(staticcall(gas(), 0x7, 0x7f60, 0x60, 0x7f60, 0x40), 1), success)mstore(0x7fc0, mload(0x7ee0))                    mstore(0x7fe0, mload(0x7f00))mstore(0x8000, mload(0x7f60))                    mstore(0x8020, mload(0x7f80))success := and(eq(staticcall(gas(), 0x6, 0x7fc0, 0x80, 0x7fc0, 0x40), 1), success)mstore(0x8040, mload(0xec0))                    mstore(0x8060, mload(0xee0))mstore(0x8080, mload(0x5c60))success := and(eq(staticcall(gas(), 0x7, 0x8040, 0x60, 0x8040, 0x40), 1), success)mstore(0x80a0, mload(0x7fc0))                    mstore(0x80c0, mload(0x7fe0))mstore(0x80e0, mload(0x8040))                    mstore(0x8100, mload(0x8060))success := and(eq(staticcall(gas(), 0x6, 0x80a0, 0x80, 0x80a0, 0x40), 1), success)mstore(0x8120, mload(0xf00))                    mstore(0x8140, mload(0xf20))mstore(0x8160, mload(0x5ca0))success := and(eq(staticcall(gas(), 0x7, 0x8120, 0x60, 0x8120, 0x40), 1), success)mstore(0x8180, mload(0x80a0))                    mstore(0x81a0, mload(0x80c0))mstore(0x81c0, mload(0x8120))                    mstore(0x81e0, mload(0x8140))success := and(eq(staticcall(gas(), 0x6, 0x8180, 0x80, 0x8180, 0x40), 1), success)mstore(0x8200, mload(0xf40))                    mstore(0x8220, mload(0xf60))mstore(0x8240, mload(0x5ce0))success := and(eq(staticcall(gas(), 0x7, 0x8200, 0x60, 0x8200, 0x40), 1), success)mstore(0x8260, mload(0x8180))                    mstore(0x8280, mload(0x81a0))mstore(0x82a0, mload(0x8200))                    mstore(0x82c0, mload(0x8220))success := and(eq(staticcall(gas(), 0x6, 0x8260, 0x80, 0x8260, 0x40), 1), success)mstore(0x82e0, mload(0xf80))                    mstore(0x8300, mload(0xfa0))mstore(0x8320, mload(0x5d20))success := and(eq(staticcall(gas(), 0x7, 0x82e0, 0x60, 0x82e0, 0x40), 1), success)mstore(0x8340, mload(0x8260))                    mstore(0x8360, mload(0x8280))mstore(0x8380, mload(0x82e0))                    mstore(0x83a0, mload(0x8300))success := and(eq(staticcall(gas(), 0x6, 0x8340, 0x80, 0x8340, 0x40), 1), success)mstore(0x83c0, mload(0xf00))                    mstore(0x83e0, mload(0xf20))mstore(0x8400, mload(0x5720))success := and(eq(staticcall(gas(), 0x7, 0x83c0, 0x60, 0x83c0, 0x40), 1), success)mstore(0x8420, mload(0xec0))                    mstore(0x8440, mload(0xee0))mstore(0x8460, mload(0x83c0))                    mstore(0x8480, mload(0x83e0))success := and(eq(staticcall(gas(), 0x6, 0x8420, 0x80, 0x8420, 0x40), 1), success)mstore(0x84a0, mload(0xf40))                    mstore(0x84c0, mload(0xf60))mstore(0x84e0, mload(0x5a00))success := and(eq(staticcall(gas(), 0x7, 0x84a0, 0x60, 0x84a0, 0x40), 1), success)mstore(0x8500, mload(0x8420))                    mstore(0x8520, mload(0x8440))mstore(0x8540, mload(0x84a0))                    mstore(0x8560, mload(0x84c0))success := and(eq(staticcall(gas(), 0x6, 0x8500, 0x80, 0x8500, 0x40), 1), success)mstore(0x8580, mload(0xf80))                    mstore(0x85a0, mload(0xfa0))mstore(0x85c0, mload(0x5be0))success := and(eq(staticcall(gas(), 0x7, 0x8580, 0x60, 0x8580, 0x40), 1), success)mstore(0x85e0, mload(0x8500))                    mstore(0x8600, mload(0x8520))mstore(0x8620, mload(0x8580))                    mstore(0x8640, mload(0x85a0))success := and(eq(staticcall(gas(), 0x6, 0x85e0, 0x80, 0x85e0, 0x40), 1), success)mstore(0x8660, mload(0x8340))                    mstore(0x8680, mload(0x8360))mstore(0x86a0, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)            mstore(0x86c0, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)            mstore(0x86e0, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)            mstore(0x8700, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)mstore(0x8720, mload(0x85e0))                    mstore(0x8740, mload(0x8600))mstore(0x8760, 0x186282957db913abd99f91db59fe69922e95040603ef44c0bd7aa3adeef8f5ac)            mstore(0x8780, 0x17944351223333f260ddc3b4af45191b856689eda9eab5cbcddbbe570ce860d2)            mstore(0x87a0, 0x06d971ff4a7467c3ec596ed6efc674572e32fd6f52b721f97e35b0b3d3546753)            mstore(0x87c0, 0x06ecdb9f9567f59ed2eee36e1e1d58797fd13cc97fafc2910f5e8a12f202fa9a)success := and(eq(staticcall(gas(), 0x8, 0x8660, 0x180, 0x8660, 0x20), 1), success)success := and(eq(mload(0x8660), 1), success)} return success; } }
